{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","memo","posts","setSideBarOpened","sideBarOpened","setSelectedPostId","selectedPostId","handleSelectedPost","useCallback","postId","className","map","post","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","comments","onAdd","useState","name","setName","email","setEmail","message","setMessage","nameError","setNameError","emailError","setEmailError","messageError","setMessageError","isLoading","setIsLoading","onChangeName","e","target","value","onChangeEmail","onChangeMessage","handleSubmit","a","preventDefault","newComment","Math","max","comment","postedComment","handleClear","onSubmit","htmlFor","placeholder","onChange","PostDetails","setComments","isLoadingComments","setIsLoadingComments","hasLoadingError","setHasLoadingError","isNewCommentFormOpened","setIsNewCommentFormOpened","useEffect","loadComments","commentsFromServer","handleDeleteComment","commentId","prevComments","filter","handleOpenNewCommentForm","handleAddNewComment","length","href","UserSelector","setUserId","userId","isDropdownOpened","onCloseDropdown","onToggle","users","setUsers","loadUsers","usersFromServer","handleSelect","selectedUserId","chosenUser","useMemo","find","currentUser","Boolean","role","user","App","setIsDropdownOpened","setPosts","isLoadingPosts","setIsLoadingPosts","loadPosts","postsFromServer","selectedPost","closeDropDown","toggleDropdown","ReactDOM","render","document","getElementById"],"mappings":"uSAYaA,EAA6BC,gBAAK,YAMxC,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,cACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,eAEMC,EAAqBC,uBAAY,SAACC,GACjCL,GAAkBE,IACrBH,GAAiB,GACjBE,EAAkBI,IAGhBL,GAAkBE,IAAmBG,IACvCN,GAAiB,GACjBE,EAAkB,IAGhBD,GAAkBE,IAAmBG,GACvCJ,EAAkBI,GAGfL,GAAkBE,IAAmBG,IACxCN,GAAiB,GACjBE,EAAkBI,MAEnB,CAACL,EAAeE,IAEnB,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGI,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGR,EAAMS,KAAI,SAAAC,GAAI,OACb,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAKC,KAE3B,oBAAI,UAAQ,YAAZ,SACGD,EAAKE,QAGR,oBAAIJ,UAAU,8BAAd,SACE,wBACEK,KAAK,SACL,UAAQ,aACRL,UAAWM,IAAW,iBAAkB,CACtC,aAAcV,IAAmBM,EAAKC,MAExCI,QAAS,kBAAMV,EAAmBK,EAAKC,KANzC,SAQKP,IAAmBM,EAAKC,GAAM,OAAS,cAhBxBD,EAAKC,kB,OCrD5BK,G,MAAS,kBACpB,qBAAKR,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCJbS,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADI,KAEVC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIZ,GAAJ,OAAoBD,EAAWC,IADzBY,EAEL,SAAIZ,EAAaE,GAAjB,OAAmCH,EAAWC,EAAK,OAAQE,IAFtDU,EAIH,SAACZ,GAAD,OAAiBD,EAAQC,EAAK,WC1B3Ba,EAAkCtC,gBAAK,YAI7C,IAHLuC,EAGI,EAHJA,SACAC,EAEI,EAFJA,MACAhC,EACI,EADJA,OAEA,EAAwBiC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAoCR,oBAAS,GAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAAwCV,oBAAS,GAAjD,mBAAOW,EAAP,KAAqBC,EAArB,KACA,EAAkCZ,oBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KAEMC,EAAejD,uBAAY,SAACkD,GAChCd,EAAQc,EAAEC,OAAOC,OACjBV,GAAa,KACZ,CAACP,EAAMM,IAEJY,EAAgBrD,uBAAY,SAChCkD,GAEAZ,EAASY,EAAEC,OAAOC,OAClBR,GAAc,KACb,CAACP,EAAOM,IAELW,EAAkBtD,uBAAY,SAClCkD,GAEAV,EAAWU,EAAEC,OAAOC,OACpBN,GAAgB,KACf,CAACP,EAASM,IAEPU,EAAevD,sBAAW,uCAAC,WAC/BkD,GAD+B,iBAAAM,EAAA,yDAG/BN,EAAEO,iBAEFf,GAAcP,GACdS,GAAeP,GACfS,GAAiBP,KAEbJ,GAAQE,GAASE,GATU,wBAUvBmB,EAAsB,CAC1BrD,GAAIsD,KAAKC,IAAL,MAAAD,KAAI,YAAQ3B,EAAS7B,KAAI,SAAA0D,GAAO,OAAIA,EAAQxD,QAAO,EACvDJ,SACAkC,OACAE,QACAf,KAAMiB,GAGRS,GAAa,GAlBgB,SAmBQlB,EAAY,YAAa4B,GAnBjC,OAmBvBI,EAnBuB,OAqB7Bd,GAAa,GAETc,IACF7B,EAAM6B,GACNtB,EAAW,KAzBgB,4CAAD,sDA4B7B,CAACL,EAAMM,EAAWJ,EAAOM,EAAYJ,EAASM,EAAcE,IAEzDgB,EAAc/D,uBAAY,WAC9BoC,EAAQ,IACRE,EAAS,IACTE,EAAW,MACV,CAACL,EAAME,EAAOE,IAEjB,OACE,uBACE,UAAQ,iBACRyB,SAAUT,EAFZ,UAIE,sBAAKrD,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQ+D,QAAQ,sBAAjC,yBAIA,sBAAK/D,UAAU,yCAAf,UACE,uBACEK,KAAK,OACL4B,KAAK,OACL9B,GAAG,sBACH6D,YAAY,eACZhE,UAAWM,IAAW,QAAS,CAAE,YAAaiC,IAC9CW,MAAOjB,EACPgC,SAAU,SAAAjB,GAAC,OAAID,EAAaC,MAG9B,sBAAMhD,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGduC,GACC,sBACEvC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBuC,GACC,mBAAGvC,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQ+D,QAAQ,uBAAjC,0BAIA,sBAAK/D,UAAU,yCAAf,UACE,uBACEK,KAAK,OACL4B,KAAK,QACL9B,GAAG,uBACH6D,YAAY,iBACZhE,UAAWM,IAAW,QAAS,CAAE,YAAamC,IAC9CS,MAAOf,EACP8B,SAAU,SAAAjB,GAAC,OAAIG,EAAcH,MAG/B,sBAAMhD,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGdyC,GACC,sBACEzC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlByC,GACC,mBAAGzC,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQ+D,QAAQ,eAAjC,0BAIA,qBAAK/D,UAAU,UAAf,SACE,0BACEG,GAAG,eACH8B,KAAK,OACL+B,YAAY,oBACZhE,UAAWM,IAAW,WAAY,CAAE,YAAaqC,IACjDO,MAAOb,EACP4B,SAAU,SAAAjB,GAAC,OAAII,EAAgBJ,QAIlCL,GACC,mBAAG3C,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEK,KAAK,SACLL,UAAWM,IACT,iBACA,CAAE,aAAcuC,IAJpB,mBAWF,qBAAK7C,UAAU,UAAf,SAEE,wBACEK,KAAK,QACLL,UAAU,0BACVO,QAASsD,EAHX,8BCpLGK,EAA+B3E,gBAAK,YAAe,IAAZW,EAAW,EAAXA,KAClD,EAAgC8B,mBAAoB,IAApD,mBAAOF,EAAP,KAAiBqC,EAAjB,KACA,EAAkDnC,oBAAS,GAA3D,mBAAOoC,EAAP,KAA0BC,EAA1B,KACA,EAA8CrC,oBAAS,GAAvD,mBAAOsC,EAAP,KAAwBC,EAAxB,KACA,EAA4DvC,oBAAS,GAArE,mBAAOwC,EAAP,KAA+BC,EAA/B,KAEAC,qBAAU,WACR,IAAMC,EAAY,uCAAG,4BAAArB,EAAA,6DACnBe,GAAqB,GACrBE,GAAmB,GAFA,kBAK2B3C,EAAA,2BAA+B1B,EAAKC,KAL/D,OAKXyE,EALW,OAOjBP,GAAqB,GACrBF,EAAYS,GARK,kDAUjBL,GAAmB,GACnBF,GAAqB,GAXJ,0DAAH,qDAelBM,MACC,CAACzE,EAAKC,KAET,IAAM0E,EAAsB/E,sBAAW,uCAAC,WAAOgF,GAAP,SAAAxB,EAAA,sEACT1B,EAAA,oBAA2BkD,IADlB,OAGf,IAHe,QAIpCX,GAAY,SAAAY,GAAY,OAAIA,EAAaC,QAAO,SAAArB,GAC9C,OAAOA,EAAQxD,KAAO2E,QALY,2CAAD,sDAQpC,CAAChD,IAEEmD,EAA2BnF,uBAAY,WAC3C2E,GAA0B,KACzB,CAACD,IAEJE,qBAAU,WACRD,GAA0B,KACzB,CAACvE,IAEJ,IAAMgF,EAAsBpF,uBAAY,SAAC0D,GACvCW,GAAY,SAAAY,GAAY,4BAAQA,GAAR,CAAsBvB,SAC7C,CAAC1B,IAEJ,OACE,qBAAK9B,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBACOE,EAAKC,GADZ,aACmBD,EAAKE,SAGxB,mBAAG,UAAQ,WAAX,SACGF,EAAKkB,UAIV,sBAAKpB,UAAU,QAAf,UACGoE,GAAsB,cAAC,EAAD,IAEtBE,GACC,qBAAKtE,UAAU,yBAAyB,UAAQ,gBAAhD,kCAMoB,IAApB8B,EAASqD,QACNjF,EAAKC,KACJiE,IACAE,GAEJ,mBAAGtE,UAAU,aAAa,UAAQ,oBAAlC,6BAKA8B,EAASqD,OAAS,IAAMf,GAExB,qCACE,mBAAGpE,UAAU,aAAb,uBACC8B,EAAS7B,KAAI,SAAA0D,GAAO,OACnB,0BACE3D,UAAU,mBACV,UAAQ,UAFV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAGoF,KAAI,iBAAYzB,EAAQxB,OAAS,UAAQ,gBAA5C,SACGwB,EAAQ1B,OAEX,wBACE,UAAQ,gBACR5B,KAAK,SACLL,UAAU,kBACV,aAAW,SACXO,QAAS,kBAAMsE,EAAoBlB,EAAQxD,KAL7C,8BAUF,qBAAKH,UAAU,eAAe,UAAQ,cAAtC,SACG2D,EAAQvC,SAjBNuC,EAAQxD,WAwBlBmE,IAAoBE,GACrB,wBACE,UAAQ,qBACRnE,KAAK,SACLL,UAAU,iBACVO,QAAS,kBAAM0E,KAJjB,gCAWHT,GACC,cAAC3C,EAAD,CACEC,SAAUA,EACVC,MAAOmD,EACPnF,OAAQG,EAAKC,aC7HZkF,EAAgC9F,gBAAK,YAM3C,IALL+F,EAKI,EALJA,UACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,SAEA,EAA0B1D,mBAAiB,IAA3C,mBAAO2D,EAAP,KAAcC,EAAd,KAEAlB,qBAAU,WACR,IAAMmB,EAAS,uCAAG,4BAAAvC,EAAA,sEACsB1B,EAAW,UADjC,OACVkE,EADU,OAGhBF,EAASE,GAHO,2CAAH,qDAMfD,MACC,IAEH,IAAME,EAAejG,uBAAY,SAC/BkD,EACAgD,GAEAhD,EAAEO,iBACF+B,EAAUU,GACVP,MACC,CAACH,IAEEW,EAAaC,mBAAQ,WACzB,OAAOP,EAAMQ,MAAK,SAAAC,GAAW,OAAIA,EAAYjG,KAAOoF,OACnD,CAACA,IAEJ,OACE,sBACE,UAAQ,eACRvF,UAAU,qBAFZ,UAIE,qBAAKA,UAAU,mBAAf,SACE,yBACEK,KAAK,SACLL,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdO,QAAS,kBAAMmF,KALjB,UAOE,+BAAQO,EAA+BA,EAAWhE,KAA7B,kBAErB,sBAAMjC,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKlDqG,QAAQb,IACP,qBAAKxF,UAAU,gBAAgBG,GAAG,gBAAgBmG,KAAK,OAAvD,SACE,qBAAKtG,UAAU,mBAAf,SACG2F,EAAM1F,KAAI,SAAAsG,GAAI,OACb,mBAEEnB,KAAI,eAAUmB,EAAKpG,IACnBH,UAAWM,IACT,gBACA,CAAE,YAAaiG,EAAKpG,KAAOoF,IAE7BhF,QAAS,SAACyC,GAAD,OAAO+C,EAAa/C,EAAGuD,EAAKpG,KAPvC,SASGoG,EAAKtE,MARDsE,EAAKpG,iBC3DbqG,EAAgB,WAC3B,MAAgDxE,oBAAS,GAAzD,mBAAOwD,EAAP,KAAyBiB,EAAzB,KACA,EAA0BzE,mBAAiB,IAA3C,mBAAOxC,EAAP,KAAckH,EAAd,KACA,EAA4B1E,mBAAiB,GAA7C,mBAAOuD,EAAP,KAAeD,EAAf,KACA,EAA4CtD,oBAAS,GAArD,mBAAO2E,EAAP,KAAuBC,EAAvB,KACA,EAA8C5E,oBAAS,GAAvD,mBAAOsC,EAAP,KAAwBC,EAAxB,KACA,EAA0CvC,oBAAS,GAAnD,mBAAOtC,EAAP,KAAsBD,EAAtB,KACA,EAA4CuC,mBAAiB,GAA7D,mBAAOpC,EAAP,KAAuBD,EAAvB,KAEA+E,qBAAU,WACR,IAAMmC,EAAS,uCAAG,4BAAAvD,EAAA,6DAChBsD,GAAkB,GAClBrC,GAAmB,GAFH,kBAKwB3C,EAAA,wBAA4B2D,IALpD,OAKRuB,EALQ,OAOdF,GAAkB,GAClBF,EAASI,GARK,kDAUdvC,GAAmB,GACnBqC,GAAkB,GAXJ,0DAAH,qDAefC,MACC,CAACtB,IAEJ,IAAMwB,EAAeb,mBAAQ,WAC3B,OAAO1G,EAAM2G,MAAK,SAAAjG,GAAI,OAAIA,EAAKC,KAAOP,MAAmB,OACxD,CAACA,IAEJ8E,qBAAU,WACRjF,GAAiB,KAChB,CAAC8F,IAEJ,IAAMyB,EAAgBlH,uBAAY,WAC5B0F,GACFiB,GAAoB,KAErB,CAACjB,IAEEyB,EAAiBnH,uBAAY,WACjC2G,GAAqBjB,KACpB,CAACA,IAMJ,OAJAd,qBAAU,WACR/E,EAAkB,KACjB,CAAC4F,IAGF,sBACEvF,UAAU,UACVO,QAASyG,EACT,cAAY,OAHd,SAKE,qBAAKhH,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAACqF,EAAD,CACEC,UAAWA,EACXC,OAAQA,EACRC,iBAAkBA,EAClBC,gBAAiBuB,EACjBtB,SAAUuB,MAId,sBAAKjH,UAAU,QAAQ,UAAQ,cAA/B,WACKuF,IAAWjB,GACZ,mBAAG,UAAQ,iBAAX,8BAKD+B,QAAQd,IACP,qCACGc,QAAQM,IAAoB,cAAC,EAAD,IAE5BN,QAAQ/B,IACP,qBACEtE,UAAU,yBACV,UAAQ,oBAFV,mCASiB,IAAjBR,EAAM2F,QACHkB,QAAQd,KACPoB,IACArC,GAEJ,qBACEtE,UAAU,0BACV,UAAQ,aAFV,0BAQAR,EAAM2F,OAAS,IAAMwB,GAEnB,cAACrH,EAAD,CACEE,MAAOA,EACPC,iBAAkBA,EAClBC,cAAeA,EACfC,kBAAmBA,EACnBC,eAAgBA,eAShC,qBACE,UAAQ,UACRI,UAAWM,IACT,OACA,YACA,eACA,UACA,CAAE,gBAAiBZ,IAPvB,SAUE,qBAAKM,UAAU,gCAAf,SACG+G,GACC,cAAC7C,EAAD,CAAahE,KAAM6G,gBClJnCG,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.de27e0d0.chunk.js","sourcesContent":["import React, { memo, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  setSideBarOpened: (value: boolean) => void;\n  sideBarOpened: boolean;\n  setSelectedPostId: (postId: number) => void;\n  selectedPostId: number;\n};\n\nexport const PostsList: React.FC<Props> = memo(({\n  posts,\n  setSideBarOpened,\n  sideBarOpened,\n  setSelectedPostId,\n  selectedPostId,\n}) => {\n  const handleSelectedPost = useCallback((postId: number) => {\n    if (!sideBarOpened && !selectedPostId) {\n      setSideBarOpened(true);\n      setSelectedPostId(postId);\n    }\n\n    if (sideBarOpened && (selectedPostId === postId)) {\n      setSideBarOpened(false);\n      setSelectedPostId(0);\n    }\n\n    if (sideBarOpened && (selectedPostId !== postId)) {\n      setSelectedPostId(postId);\n    }\n\n    if (!sideBarOpened && (selectedPostId !== postId)) {\n      setSideBarOpened(true);\n      setSelectedPostId(postId);\n    }\n  }, [sideBarOpened, selectedPostId]);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': !(selectedPostId === post.id),\n                  })}\n                  onClick={() => handleSelectedPost(post.id)}\n                >\n                  {!(selectedPostId === post.id) ? 'Open' : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState, memo, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  comments: Comment[];\n  onAdd: (newComment: Comment) => void;\n  postId: number;\n};\n\nexport const NewCommentForm: React.FC<Props> = memo(({\n  comments,\n  onAdd,\n  postId,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [messageError, setMessageError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onChangeName = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    setNameError(false);\n  }, [name, nameError]);\n\n  const onChangeEmail = useCallback((\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setEmail(e.target.value);\n    setEmailError(false);\n  }, [email, emailError]);\n\n  const onChangeMessage = useCallback((\n    e: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setMessage(e.target.value);\n    setMessageError(false);\n  }, [message, messageError]);\n\n  const handleSubmit = useCallback(async (\n    e: React.FormEvent<HTMLFormElement>,\n  ) => {\n    e.preventDefault();\n\n    setNameError(!name);\n    setEmailError(!email);\n    setMessageError(!message);\n\n    if (name && email && message) {\n      const newComment: Comment = {\n        id: Math.max(...comments.map(comment => comment.id)) + 1,\n        postId,\n        name,\n        email,\n        body: message,\n      };\n\n      setIsLoading(true);\n      const postedComment: Comment = await client.post('/comments', newComment);\n\n      setIsLoading(false);\n\n      if (postedComment) {\n        onAdd(postedComment);\n        setMessage('');\n      }\n    }\n  }, [name, nameError, email, emailError, message, messageError, isLoading]);\n\n  const handleClear = useCallback(() => {\n    setName('');\n    setEmail('');\n    setMessage('');\n  }, [name, email, message]);\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': nameError })}\n            value={name}\n            onChange={e => onChangeName(e)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': emailError })}\n            value={email}\n            onChange={e => onChangeEmail(e)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': messageError })}\n            value={message}\n            onChange={e => onChangeMessage(e)}\n          />\n        </div>\n\n        {messageError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n});\n","import React, {\n  useState,\n  useEffect,\n  memo,\n  useCallback,\n} from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = memo(({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [isNewCommentFormOpened, setIsNewCommentFormOpened] = useState(false);\n\n  useEffect(() => {\n    const loadComments = async () => {\n      setIsLoadingComments(true);\n      setHasLoadingError(false);\n\n      try {\n        const commentsFromServer: Comment[] = await client.get(`/comments?postId=${post.id}`);\n\n        setIsLoadingComments(false);\n        setComments(commentsFromServer);\n      } catch (error) {\n        setHasLoadingError(true);\n        setIsLoadingComments(false);\n      }\n    };\n\n    loadComments();\n  }, [post.id]);\n\n  const handleDeleteComment = useCallback(async (commentId: number) => {\n    const deletedComment = await client.delete(`/comments/${commentId}`);\n\n    if (deletedComment === 1) {\n      setComments(prevComments => prevComments.filter(comment => {\n        return comment.id !== commentId;\n      }));\n    }\n  }, [comments]);\n\n  const handleOpenNewCommentForm = useCallback(() => {\n    setIsNewCommentFormOpened(true);\n  }, [isNewCommentFormOpened]);\n\n  useEffect(() => {\n    setIsNewCommentFormOpened(false);\n  }, [post]);\n\n  const handleAddNewComment = useCallback((newComment: Comment) => {\n    setComments(prevComments => [...prevComments, newComment]);\n  }, [comments]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments && (<Loader />)}\n\n          {hasLoadingError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(\n            comments.length === 0\n            && post.id\n            && !isLoadingComments\n            && !hasLoadingError\n          ) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {(comments.length > 0 && !isLoadingComments)\n          && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {(!hasLoadingError && !isNewCommentFormOpened) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => handleOpenNewCommentForm()}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isNewCommentFormOpened && (\n          <NewCommentForm\n            comments={comments}\n            onAdd={handleAddNewComment}\n            postId={post.id}\n          />\n        )}\n      </div>\n    </div>\n  );\n});\n","import React, {\n  useState,\n  useEffect,\n  memo,\n  useCallback,\n  useMemo,\n} from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  setUserId: (userId: number) => void;\n  userId: number;\n  isDropdownOpened: boolean;\n  onCloseDropdown: () => void;\n  onToggle: () => void;\n};\n\nexport const UserSelector: React.FC<Props> = memo(({\n  setUserId,\n  userId,\n  isDropdownOpened,\n  onCloseDropdown,\n  onToggle,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    const loadUsers = async () => {\n      const usersFromServer: User[] = await client.get('/users');\n\n      setUsers(usersFromServer);\n    };\n\n    loadUsers();\n  }, []);\n\n  const handleSelect = useCallback((\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    selectedUserId: number,\n  ) => {\n    e.preventDefault();\n    setUserId(selectedUserId);\n    onCloseDropdown();\n  }, [setUserId]);\n\n  const chosenUser = useMemo(() => {\n    return users.find(currentUser => currentUser.id === userId);\n  }, [userId]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => onToggle()}\n        >\n          <span>{!chosenUser ? 'Choose a user' : chosenUser.name}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {Boolean(isDropdownOpened) && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                key={user.id}\n                href={`user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': user.id === userId },\n                )}\n                onClick={(e) => handleSelect(e, user.id)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n\n    </div>\n  );\n});\n","import React, {\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { client } from './utils/fetchClient';\n\nexport const App: React.FC = () => {\n  const [isDropdownOpened, setIsDropdownOpened] = useState(false);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [userId, setUserId] = useState<number>(0);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [sideBarOpened, setSideBarOpened] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n\n  useEffect(() => {\n    const loadPosts = async () => {\n      setIsLoadingPosts(true);\n      setHasLoadingError(false);\n\n      try {\n        const postsFromServer: Post[] = await client.get(`/posts?userId=${userId}`);\n\n        setIsLoadingPosts(false);\n        setPosts(postsFromServer);\n      } catch (error) {\n        setHasLoadingError(true);\n        setIsLoadingPosts(false);\n      }\n    };\n\n    loadPosts();\n  }, [userId]);\n\n  const selectedPost = useMemo(() => {\n    return posts.find(post => post.id === selectedPostId) || null;\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    setSideBarOpened(false);\n  }, [userId]);\n\n  const closeDropDown = useCallback(() => {\n    if (isDropdownOpened) {\n      setIsDropdownOpened(false);\n    }\n  }, [isDropdownOpened]);\n\n  const toggleDropdown = useCallback(() => {\n    setIsDropdownOpened(!isDropdownOpened);\n  }, [isDropdownOpened]);\n\n  useEffect(() => {\n    setSelectedPostId(0);\n  }, [userId]);\n\n  return (\n    <main\n      className=\"section\"\n      onClick={closeDropDown}\n      aria-hidden=\"true\"\n    >\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  setUserId={setUserId}\n                  userId={userId}\n                  isDropdownOpened={isDropdownOpened}\n                  onCloseDropdown={closeDropDown}\n                  onToggle={toggleDropdown}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {(!userId && !hasLoadingError) && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {Boolean(userId) && (\n                  <>\n                    {Boolean(isLoadingPosts) && (<Loader />)}\n\n                    {Boolean(hasLoadingError) && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Something went wrong!\n                      </div>\n                    )}\n\n                    {(\n                      posts.length === 0\n                      && Boolean(userId)\n                      && !isLoadingPosts\n                      && !hasLoadingError\n                    ) && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n\n                    {(posts.length > 0 && !isLoadingPosts)\n                      && (\n                        <PostsList\n                          posts={posts}\n                          setSideBarOpened={setSideBarOpened}\n                          sideBarOpened={sideBarOpened}\n                          setSelectedPostId={setSelectedPostId}\n                          selectedPostId={selectedPostId}\n                        />\n                      )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': sideBarOpened },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails post={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}